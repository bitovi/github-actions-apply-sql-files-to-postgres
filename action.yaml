name: 'Apply SQL files to Postgres Database'
description: 'Iterate through a folder containing SQL files and apply them to a Postgres Database'
branding:
  icon: upload-cloud
  color: red
inputs:
  # Checkout
  checkout:
    description: 'Specifies if this action should checkout the code'
    required: false
    default: 'true'
  
  # AWS
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_default_region:
    description: 'AWS default region'
    default: us-east-1
    required: false
  aws_role_to_assume:
    description: 'AWS Role to assume.'
    required: false

  # Database secret name
  aws_secret_name:
    description: 'Name of the AWS Secret containing the DB credentials.'
    required: false
  db_host:
    description: 'Defines the db_host to use in the connection string.'
    required: false
  db_port:
    description: 'Defines the db_port to use in the connection string.'
    required: false
  db_name:
    description: 'Defines the db_name to use in the connection string.'
    required: false
  db_username:
    description: 'Defines the db_username to use in the connection string.'
    required: false
  db_password:
    description: 'Defines the db_password to use in the connection string.'
    required: false
  sql_connection_string:
    description: 'Allows overriding default set up connection string to anything else.'
    default: "PGPASSWORD=${DB_PASSWORD} /usr/bin/psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME}"
    required: false
  dry_run: 
    description: 'Echo the commands to be executed (without passowrd). Will run a list command to test connection.'
    default: true

  # Repo details
  sql_scripts_path:
    description: 'Path containing the sql files. If none defined, will look for files in the root folder.'
    required: false

runs:
    using: 'composite'
    steps:
    - name: Checkout
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      if: ${{ inputs.aws_access_key_id != '' }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_default_region }}
        role-to-assume: ${{ inputs.aws_role_to_assume }}

    - name: Read secrets from AWS Secrets Manager into environment variables
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: ${{ inputs.aws_secret_name }}
        parse-json-secrets: true

    - name: Excecute scripts
      if: ${{ success() }}
      id: print
      shell: bash
      env:
        GH_ACTION_REPO: ${{ github.action_path }}
        SNAME: ${{ inputs.aws_secret_name }}
        DB_HOST: ${{ inputs.db_host }}
        DB_PORT: ${{ inputs.db_port }}
        DB_NAME: ${{ inputs.db_name }}
        DB_USERNAME: ${{ inputs.db_username }}
        DB_PASSWORD: ${{ inputs.db_password }}
        CONN_STR: ${{ inputs.sql_connection_string }}
        DRY_RUN: ${{ inputs.dry_run }}
        SCRIPTS_PATH: ${{ inputs.sql_scripts_path }}
      run: $GITHUB_ACTION_PATH//deploy.sh
